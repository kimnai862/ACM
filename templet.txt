************************************************************************
Aho-Corasick automaton
struct node
{
	node *next[26];
	node *fail;
	int sum;
};
node *root,*newnode,*q[N];
int cnt,head,tail;
void insert(char *s)
{
	node *p=root;
	for(int i=0;s[i];i++){
		int x=s[i]-'a';
		if(p->next[x]==NULL){
			newnode=(struct node*)malloc(sizeof(struct node));
			for(int j=0;j<26;j++)newnode->next[j]=NULL;
			newnode->sum=0;newnode->fail=NULL;
			p->next[x]=newnode;
		}
		p=p->next[x];
	}
	p->sum++;
}
void build_fail()
{
	head=0;tail=1;q[head]=root;
	node *p,*temp;
	while(head<tail){
		temp=q[head++];
		for(int i=0;i<26;i++){
			if(temp->next[i]){
				if(temp==root) temp->next[i]->fail=root;
				else{
					p=temp->fail;
					while(p){
						if(p->next[i]){temp->next[i]->fail=p->next[i];break;}
						p=p->fail;
					}
					if(p==NULL)temp->next[i]->fail=root;
				}
				q[tail++]=temp->next[i];
			}
		}
	}
}
void ac_automation(char *ch)
{
	node *p=root;
	for(int i=0;ch[i];i++){
		int x=ch[i]-'a';
		while(!p->next[x]&&p!=root)p=p->fail;
		p=p->next[x];
		if(!p)p=root;
		node *temp=p;
		while(temp!=root){
			if(temp->sum>=0){
				cnt+=temp->sum;
				temp->sum=-1;
			}
			else break;
			temp=temp->fail;
		}
	}
}
************************************************************************
Suffix Automaton
struct SAM{
	int ch[N][26],tot,dis[N],fa[N],root,last;
	char a[N];
	void init(){
		memset(ch,0,sizeof(ch));memset(dis,0,sizeof(dis));memset(fa,0,sizeof(fa));
		tot=0;root=last=++tot;
	}
	void build(){
		int n=strlen(a+1);
		for(int i=1;i<=n;i++)add(i);
	}
	void add(int pos){
		int x=a[pos]-'a',p=last,np=++tot;
		last=np,dis[np]=pos;
		for(;p&&!ch[p][x];p=fa[p])ch[p][x]=np;
		if(!p)fa[np]=root;
		else{
			int q=ch[p][x];
			if(dis[q]==dis[p]+1)fa[np]=q;
			else{
				int nq=++tot;
				dis[nq]=dis[p]+1;
				memcpy(ch[nq],ch[q],sizeof(ch[q]));
				fa[nq]=fa[q],fa[np]=fa[q]=nq;
				for(;ch[p][x]==q;p=fa[p])ch[p][x]=nq;
			}
		}
	}
	int ask(char b[])//Longest Commom Substring
	{
		int ans=0,len=0,p=root,m=strlen(b+1);
		for(int i=1;i<=m;i++){
			int x=b[i]-'a';
			if(ch[p][x])len++,p=ch[p][x];
			else{
				while(p&&!ch[p][x])p=fa[p];
				if(!p)p=root,len=0;
				else len=dis[p]+1,p=ch[p][x];
			}ans=max(ans,len);
		}
		return ans;
	}
}T;
************************************************************************